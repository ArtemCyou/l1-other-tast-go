package main

import (
	"fmt"
	"sync"
)

//Написать программу, которая конкурентно рассчитает значение квадратов чисел
//взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.

func main() {
	//массив с заданным значением
	array := [...]int{2, 4, 6, 8, 10}

	//============================= WaitGroup ===========================
	fmt.Println("WaitGroup")

	// WaitGroup-позволяет определить группу горутин,
	//которые должны выполняться вместе как одна группа и ждать окончания выполнения.
	wg := &sync.WaitGroup{}
	//создаем счетчик со значением длинны массива
	wg.Add(len(array))

	//когда отработает горутина она уменьшит счетчик wg.Add() на 1
	for _, numb := range array {
		go squadWG(numb, wg) // передаем функции элемент массива и wait group
	}

	//блокируем текущую горутину. Wait ждет пока значение счетчика не станет 0,
	//после  горутина будет разблокирована
	wg.Wait()


	//============================= Channel ===========================
	fmt.Println("Channel")

	//синхронизируем горутины с помощью буферизированного канала ch
	ch := make(chan int, len(array))

	//перебираем элементы массива и вычисляем квадрат числа
	for i, numb := range array {
		go squadChan(numb, ch, i) // передаем функции элемент массива, канал для записи и индекс элемента в массиве
	}

	// читаем из канала, для завершения работы запущенных горутин
	//запись и чтение являются блокирующими
	for i := 0; i < len(array); i++ {
		<-ch
	}

	// закрываем канал (здесь применение избыточно). таким образом объявляем, что данные больше отправляться не будут
	// при попытке прочитать получим нулевое значение
	close(ch)
}

func squadWG(numb int, wg *sync.WaitGroup) {
	sq := numb * numb
	//выводим результат в stdout
	fmt.Printf("\"WG\" Квадрат числа wg: %d, равен: %d\n", numb, sq)

	//Done сигнализирует, что элемент группы завершил свое выполнение
	wg.Done()
}

// в параметрах функции указываем канал на запись, чтобы при беглом просмотре было понятно,
//что данная функция делает с каналом
func squadChan(numb int, ch chan <- int, i int) {
	sq := numb * numb
	//выводим результат в stdout
	fmt.Printf("\"Ch\" Квадрат числа : %d, равен: %d\n", numb, sq)

	// пишем данные в канал
	ch <- i
}
